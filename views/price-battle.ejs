<%- include('partials/header', {title: 'Chiến giá' , currentPage: 'price-battle' , time: time}) %>

    <h1 class="section-title">Chiến giá</h1>
    <p>Ngày phát sinh: <span id="current-date">
            <%= new Date().toLocaleDateString('vi-VN') %>
        </span></p>
    <p>Tạo bởi: <strong>
            <%= user ? (user.full_name || user.email) : 'admin@example.com' %>
        </strong></p>

    <div class="price-battle-section">
        <h2 class="section-title">Thông tin sản phẩm</h2>

        <div class="info-group">
            <label class="info-label">SKU *</label>
            <div class="autocomplete-container">
                <input type="text" class="info-input" id="battleSku"
                    placeholder="Nhập SKU (Có gợi ý theo list SKU-tên sp)" autocomplete="off" required>
                <div class="autocomplete-results" id="battleAutocomplete"></div>
                <input type="hidden" id="isNewSku" value="false" />
                <small id="newSkuBadge" style="display:none;color:#e65100;font-weight:600;">
                    Đang thêm SKU mới – vui lòng nhập Tên SP và Giá niêm yết.
                </small>
            </div>
        </div>

        <div class="info-group">
            <label class="info-label">Tên sản phẩm</label>
            <input type="text" class="info-input" id="skuName" placeholder="Tên sản phẩm sẽ hiển thị ở đây" disabled>
        </div>

        <div class="info-group">
            <label class="info-label">Giá niêm yết</label>
            <input type="text" class="info-input" id="listPrice" placeholder="Giá niêm yết" disabled>
        </div>

        <div class="info-group">
            <label class="info-label">Giá khuyến mãi (nếu có)</label>
            <input type="text" class="info-input" id="promoPrice"
                placeholder="Nhập giá khuyến mãi nếu khác với giá niêm yết">
        </div>
    </div>

    <div class="price-battle-section">
        <h2 class="section-title">Thông tin đối thủ *</h2>

        <table class="competitor-table">
            <tr>
                <th>Tên đối thủ *</th>
                <td>
                    <label><input type="radio" name="competitor" value="FPT" required> FPT</label>
                    <label><input type="radio" name="competitor" value="CPS"> CPS</label>
                    <label><input type="radio" name="competitor" value="TGDD"> TGDD</label>
                    <label><input type="radio" name="competitor" value="Khác"> Khác</label>
                </td>
            </tr>
            <tr id="otherCompetitorRow" style="display:none;">
                <th>Tên đối thủ khác *</th>
                <td><input type="text" class="info-input" id="otherCompetitor" placeholder="Nhập tên đối thủ"></td>
            </tr>
            <tr>
                <th>Giá đối thủ *</th>
                <td><input type="number" class="info-input" id="competitorPrice" placeholder="Nhập giá đối thủ"
                        required></td>
            </tr>
            <tr>
                <th>Link đối thủ</th>
                <td><input type="url" class="info-input" id="competitorLink" placeholder="https://example.com/san-pham">
                </td>
            </tr>
            <tr>
                <th>Hình ảnh (tối đa 3 ảnh)</th>
                <td>
                    <input type="file" id="competitorImages" accept="image/*" multiple>
                    <div id="imagePreview" style="margin-top:8px;"></div>
                </td>
            </tr>
        

        <tr>
            <th>Tình trạng kho đối thủ *</th>
            <td>
                <label class="stock-option">
                    <input type="radio" name="stock" value="available" checked required> Còn hàng
                </label>
                <label class="stock-option">
                    <input type="radio" name="stock" value="out-of-stock"> Hết hàng
                </label>
            </td>
        </tr>
        </table>


        <div class="result-section">
            <h3 class="section-title">Kết quả</h3>

            <div class="info-group">
                <label class="info-label">Chênh lệch giá</label>
                <input type="text" class="info-input" id="priceDifference" placeholder="Tự động tính toán" disabled>
            </div>

            <div class="result-text">
                <p>Căn giảm thêm: <span id="differenceAmount">0</span> VNĐ</p>
                <p>Giá gợi ý: <span id="suggestedPrice">0</span> VNĐ</p>
            </div>

            <button class="submit-btn" id="saveComparison" disabled>Lưu và gửi yêu cầu</button>
        </div>
    </div>

    <!-- Hiển thị lịch sử so sánh -->
    <div class="comparison-history">
        <h2 class="section-title">Lịch sử so sánh giá gần đây</h2>
        <div class="history-list">
            <% if (recentComparisons && recentComparisons.length> 0) { %>
                <% recentComparisons.forEach(function(comparison){ %>
                    <div class="history-item">
                        <div class="history-header">
                            <span class="history-sku"><strong>
                                    <%= comparison.sku %>
                                </strong></span>
                            <% const __compName=(comparison.competitor_name || '' ); const
                                __compKey=__compName.toLowerCase().normalize('NFD').replace(/[\u0300-\u036f]/g,'').replace(/\s+/g,'');
                                %>
                                <span class="history-competitor competitor-<%= __compKey %>">
                                    <%= comparison.competitor_name %>
                                </span>
                        </div>
                        <div class="history-details">
                            <div><strong>Tên SP:</strong>
                                <%= comparison.product_name %>
                            </div>
                            <div><strong>Người tạo:</strong>
                                <%= comparison.created_by || 'System' %>
                            </div>
                            <div>Giá của ta: <span class="history-price">
                                    <%= new Intl.NumberFormat('vi-VN').format(comparison.our_price) %> VNĐ
                                </span></div>
                            <div>Giá đối thủ: <span class="history-price">
                                    <%= new Intl.NumberFormat('vi-VN').format(comparison.competitor_price) %> VNĐ
                                </span></div>
                            <div>Chênh lệch: <span class="history-difference">
                                    <%= new Intl.NumberFormat('vi-VN').format(comparison.price_difference) %> VNĐ
                                </span></div>
                            <div>Ngày: <%= new Date(comparison.created_at).toLocaleDateString('vi-VN') %>
                            </div>

                            <% let imgs=[]; try { imgs=Array.isArray(comparison.images) ? comparison.images :
                                JSON.parse(comparison.images || '[]' ); } catch (err) { imgs=[]; } function toDriveId(u)
                                { try { const m=String(u).match(/(?:id=|\/d\/)([A-Za-z0-9_-]+)/); return m ? m[1] :
                                null; } catch(e) { return null; } } %>
                                <% if (imgs.length> 0) { %>
                                    <div class="history-images">
                                        <% imgs.slice(0,6).forEach(function(raw, idx){ const id=toDriveId(raw); const
                                            view=id ? ('https://drive.google.com/uc?export=view&id=' + id) : raw;
                                     const thumb = id ? (' https://drive.google.com/thumbnail?id=' + id + ' &sz=w600')
                                            : raw; %>
                                            <a class="img-thumb" href="<%= view %>" target="_blank" rel="noopener"
                                                title="Xem ảnh <%= idx+1 %>">
                                                <img loading="lazy" src="<%= thumb %>" alt="Ảnh <%= idx+1 %>"
                                                    onerror="this.onerror=null; this.src='<%= view %>'">
                                            </a>
                                            <% }); %>
                                    </div>
                                    <% } %>
                        </div>
                    </div>
                    <% }); %>
                        <% } else { %>
                            <p class="no-data">Chưa có lịch sử so sánh giá</p>
                            <% } %>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const battleSku = document.getElementById('battleSku');
            const battleAutocomplete = document.getElementById('battleAutocomplete');
            const skuName = document.getElementById('skuName');
            const listPrice = document.getElementById('listPrice');
            const promoPrice = document.getElementById('promoPrice');
            const competitorPrice = document.getElementById('competitorPrice');
            const priceDifference = document.getElementById('priceDifference');
            const differenceAmount = document.getElementById('differenceAmount');
            const suggestedPrice = document.getElementById('suggestedPrice');
            const saveButton = document.getElementById('saveComparison');
            const isNewSkuInput = document.getElementById('isNewSku');
            const newSkuBadge = document.getElementById('newSkuBadge');
            let newSkuMode = false;
            function parseVN(n) {
                if (typeof n !== 'string') n = String(n ?? '');
                return parseFloat(n.replace(/\./g, '').replace(/,/g, '')) || 0;
            }


            let selectedProduct = null;
            let timeoutId;

            // ---- helper: lấy product theo SKU (API /api/skus?q=...) ----
            async function fetchProductInfo(sku) {
                try {
                    const r = await fetch(`/api/skus?q=${encodeURIComponent(sku)}`);
                    if (r.status === 401) { location.href = '/login'; return null; }
                    const arr = await r.json();
                    if (!Array.isArray(arr) || arr.length === 0) return null;
                    return arr.find(x => String(x.sku) === String(sku)) || arr[0];
                } catch (e) {
                    console.error('fetchProductInfo error:', e);
                    return null;
                }
            }

            battleSku.addEventListener('input', function (e) {
                clearTimeout(timeoutId);
                const value = e.target.value.trim();
                selectedProduct = null;
                if (value.length < 1) { battleAutocomplete.style.display = 'none'; return; }

                timeoutId = setTimeout(async () => {
                    try {
                        const response = await fetch(`/api/skus?q=${encodeURIComponent(value)}`);
                        if (response.status === 401) { location.href = '/login'; return; }
                        const data = await response.json();

                        battleAutocomplete.innerHTML = '';
                        let exact = false;

                        (data || []).forEach(item => {
                            const div = document.createElement('div');
                            div.className = 'autocomplete-item';
                            div.innerHTML = `
          <div><strong>${item.sku}</strong> - ${item.product_name || ''}</div>
          <div style="font-size:12px;color:#666;">
            ${item.brand || ''} | ${item.list_price ? new Intl.NumberFormat('vi-VN').format(item.list_price) + ' VNĐ' : 'N/A'}
          </div>`;
                            div.addEventListener('click', function () {
                                newSkuMode = false;
                                isNewSkuInput.value = 'false';
                                newSkuBadge.style.display = 'none';

                                battleSku.value = item.sku;
                                skuName.value = item.product_name || '';
                                skuName.disabled = true;

                                listPrice.value = item.list_price ? new Intl.NumberFormat('vi-VN').format(item.list_price) : '';
                                listPrice.disabled = true;

                                selectedProduct = item;
                                battleAutocomplete.style.display = 'none';
                                validateForm();
                            });
                            if (String(item.sku) === value) exact = true;
                            battleAutocomplete.appendChild(div);
                        });

                        if (!exact && value) {
                            const add = document.createElement('div');
                            add.className = 'autocomplete-item add-new';
                            add.innerHTML = `➕ Thêm SKU mới: <strong>${value}</strong>`;
                            add.addEventListener('click', function () {
                                newSkuMode = true;
                                isNewSkuInput.value = 'true';
                                newSkuBadge.style.display = 'inline';

                                battleSku.value = value;
                                skuName.disabled = false; skuName.value = '';
                                listPrice.disabled = false; listPrice.value = '';

                                selectedProduct = null;
                                battleAutocomplete.style.display = 'none';
                                validateForm();
                            });
                            battleAutocomplete.appendChild(add);
                        }

                        battleAutocomplete.style.display = battleAutocomplete.children.length ? 'block' : 'none';
                    } catch (error) {
                        console.error('Autocomplete error:', error);
                        battleAutocomplete.style.display = 'none';
                    }
                }, 300);
            });


            battleSku.addEventListener('blur', async function () {
                const skuValue = battleSku.value.trim();
                if (skuValue && (!selectedProduct || selectedProduct.sku !== skuValue)) {
                    const productInfo = await fetchProductInfo(skuValue);
                    if (productInfo) {
                        selectedProduct = productInfo;
                        skuName.value = productInfo.product_name || '';
                        listPrice.value = productInfo.list_price
                            ? new Intl.NumberFormat('vi-VN').format(productInfo.list_price)
                            : '';
                        validateForm();
                    }
                }
            });

            // Ẩn autocomplete khi click ra ngoài
            document.addEventListener('click', function (e) {
                if (!e.target.closest('.autocomplete-container')) {
                    battleAutocomplete.style.display = 'none';
                }
            });

            // Đối thủ "Khác"
            document.querySelectorAll('input[name="competitor"]').forEach(radio => {
                radio.addEventListener('change', function () {
                    document.getElementById('otherCompetitorRow').style.display =
                        this.value === 'Khác' ? 'table-row' : 'none';
                    validateForm();
                });
            });

            // Tính chênh lệch + giá gợi ý
            function calculatePriceDifference() {
                const baseListPrice = newSkuMode
                    ? parseVN(listPrice.value)
                    : (selectedProduct ? (selectedProduct.list_price || 0) : 0);

                const ourPrice = parseVN(promoPrice.value) || baseListPrice;
                const compPrice = parseVN(competitorPrice.value);

                if (ourPrice && compPrice) {
                    const difference = ourPrice - compPrice;
                    priceDifference.value = new Intl.NumberFormat('vi-VN').format(difference);
                    differenceAmount.textContent = new Intl.NumberFormat('vi-VN').format(difference);
                    suggestedPrice.textContent = new Intl.NumberFormat('vi-VN').format(ourPrice - difference);
                } else {
                    priceDifference.value = '';
                    differenceAmount.textContent = '0';
                    suggestedPrice.textContent = '0';
                }
                validateForm();
            }

            function validateForm() {
                const isSkuValid = battleSku.value.trim() !== '';
                const needNamePrice = newSkuMode ? (skuName.value.trim() !== '' && parseVN(listPrice.value) > 0) : true;
                const isCompetitorValid = document.querySelector('input[name="competitor"]:checked') !== null;
                const isCompetitorPriceValid = competitorPrice.value.trim() !== '' && !isNaN(parseVN(competitorPrice.value));
                const isStockValid = document.querySelector('input[name="stock"]:checked') !== null;

                saveButton.disabled = !(isSkuValid && needNamePrice && isCompetitorValid && isCompetitorPriceValid && isStockValid);
            }
            promoPrice.addEventListener('input', calculatePriceDifference);
            competitorPrice.addEventListener('input', calculatePriceDifference);

            // Preview ảnh
            document.getElementById('competitorImages').addEventListener('change', function () {
                const preview = document.getElementById('imagePreview');
                preview.innerHTML = '';
                if (this.files.length > 3) {
                    alert('Chỉ được chọn tối đa 3 ảnh'); this.value = ''; return;
                }
                Array.from(this.files).forEach(file => {
                    if (!file.type.match('image.*')) { alert('Chỉ được chọn file ảnh'); this.value = ''; return; }
                    const reader = new FileReader();
                    reader.onload = e => {
                        const img = document.createElement('img');
                        img.src = e.target.result;
                        img.style.maxWidth = '100px'; img.style.maxHeight = '100px'; img.style.margin = '5px';
                        preview.appendChild(img);
                    };
                    reader.readAsDataURL(file);
                });
            });

            // Validate form
            function validateForm() {
                const isSkuValid = battleSku.value.trim() !== '';
                const isCompetitorValid = document.querySelector('input[name="competitor"]:checked') !== null;
                const isCompetitorPriceValid = competitorPrice.value.trim() !== '' &&
                    !isNaN(parseFloat(competitorPrice.value));
                const isStockValid = document.querySelector('input[name="stock"]:checked') !== null;
                saveButton.disabled = !(isSkuValid && isCompetitorValid && isCompetitorPriceValid && isStockValid);
            }
            battleSku.addEventListener('input', validateForm);
            competitorPrice.addEventListener('input', validateForm);
            document.querySelectorAll('input[name="competitor"], input[name="stock"]')
                .forEach(input => input.addEventListener('change', validateForm));

            // ---- Lưu so sánh giá ----
            saveButton.addEventListener('click', async function () {
                if (saveButton.disabled) return;

                const selectedCompetitor = document.querySelector('input[name="competitor"]:checked');
                const competitorName = selectedCompetitor.value === 'Khác'
                    ? document.getElementById('otherCompetitor').value
                    : selectedCompetitor.value;
                if (selectedCompetitor.value === 'Khác' && !document.getElementById('otherCompetitor').value) {
                    alert('Vui lòng nhập tên đối thủ'); return;
                }

                // Lấy product nếu user chỉ nhập SKU
                const skuValue = battleSku.value.trim();

                // fallback nếu user gõ SKU có thật nhưng không click gợi ý
                if (!newSkuMode && !selectedProduct && skuValue) {
                    const productInfo = await fetchProductInfo(skuValue);
                    if (productInfo) selectedProduct = productInfo;
                }

                const baseListPrice = newSkuMode
                    ? parseVN(listPrice.value)
                    : (selectedProduct ? (selectedProduct.list_price || 0) : 0);

                const ourPrice = parseVN(promoPrice.value) || baseListPrice;
                const compPrice = parseVN(competitorPrice.value);
                const difference = ourPrice - compPrice;

                const formData = new FormData();
                formData.append('sku', skuValue);
                formData.append('is_new_sku', newSkuMode ? 'true' : 'false');
                formData.append('product_name', skuName.value);
                formData.append('list_price', String(baseListPrice));

                formData.append('brand', selectedProduct ? (selectedProduct.brand || '') : '');
                formData.append('category', selectedProduct ? (selectedProduct.category || '') : '');
                formData.append('subcat', selectedProduct ? (selectedProduct.subcat || '') : '');

                formData.append('our_price', String(ourPrice));
                formData.append('promo_price', String(parseVN(promoPrice.value) || ourPrice));
                formData.append('competitor_name', competitorName);
                formData.append('competitor_price', String(compPrice));
                formData.append('competitor_link', document.getElementById('competitorLink').value || '');
                formData.append('stock_status', document.querySelector('input[name="stock"]:checked').value);
                formData.append('price_difference', String(difference));
                formData.append('suggested_price', String(ourPrice - difference));
                // (giữ nguyên phần append ảnh)


                const imageFiles = document.getElementById('competitorImages').files;
                for (let i = 0; i < imageFiles.length; i++) formData.append('images', imageFiles[i]);

                saveButton.disabled = true;
                const oldText = saveButton.textContent;
                saveButton.textContent = 'Đang lưu…';

                try {
                    const response = await fetch('/price-battle/save', {
                        method: 'POST',
                        body: formData,
                        credentials: 'include'
                    });
                    if (response.status === 401) { location.href = '/login'; return; }

                    const contentType = response.headers.get('content-type') || '';
                    if (!contentType.includes('application/json')) {
                        const text = await response.text();
                        throw new Error('Server trả về không phải JSON: ' + text.substring(0, 120));
                    }

                    const result = await response.json();
                    const isOk = result && (result.success === true || result.ok === true);
                    if (isOk) {
                        alert('Lưu so sánh giá thành công!');
                        location.reload();
                    } else {
                        alert('Lỗi: ' + (result && result.error ? result.error : 'Không rõ nguyên nhân'));
                    }
                } catch (error) {
                    console.error('Save comparison error:', error);
                    alert('❌ Không lưu được: ' + (error.message || error));
                } finally {
                    saveButton.disabled = false;
                    saveButton.textContent = oldText;
                }
            });
        });
    </script>

    <%- include('partials/footer') %>