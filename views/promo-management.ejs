<%- include('partials/header', {title: 'Qu·∫£n l√Ω CTKM', currentPage: 'promo-management', time: time}) %>

<div class="promo-management">
    <h1 class="section-title">Qu·∫£n l√Ω Ch∆∞∆°ng tr√¨nh Khuy·∫øn m√£i</h1>
    
    <div class="action-buttons">
        <button class="btn btn-primary" onclick="showCreateModal()">+ T·∫°o CTKM m·ªõi</button>
        <button class="btn btn-secondary" onclick="showImportModal()">üì§ Import Excel</button>
        <a href="/" class="btn btn-info">üè† Trang ch·ªß</a>
    </div>
    
    <div class="search-box" style="margin: 20px 0;">
        <input type="text" id="promoSearch" placeholder="T√¨m ki·∫øm CTKM..." class="search-input">
    </div>
    
    <div class="promo-list">
        <% if (promotions && promotions.length > 0) { %>
            <% promotions.forEach(promo => { %>
                <div class="promo-card" data-name="<%= promo.name.toLowerCase() %>">
                    <h3><%= promo.name %></h3>
                    <p><strong>üìÖ Th·ªùi gian:</strong> <%= new Date(promo.start_date).toLocaleDateString('vi-VN') %> - <%= new Date(promo.end_date).toLocaleDateString('vi-VN') %></p>
                    <p><strong>üéØ Lo·∫°i:</strong> <%= promo.promo_type %></p>
                    <p><strong>üîÑ Channel:</strong> <%= promo.channel %></p>
                    <p><strong>üìä Tr·∫°ng th√°i:</strong> 
                        <span class="status-badge <%= new Date(promo.end_date) > new Date() ? 'active' : 'expired' %>">
                            <%= new Date(promo.end_date) > new Date() ? 'üü¢ ƒêang ho·∫°t ƒë·ªông' : 'üî¥ ƒê√£ h·∫øt h·∫°n' %>
                        </span>
                    </p>
                    <div class="promo-actions">
                        <a href="/promotion-detail/<%= promo.id %>" class="btn btn-info">üëÅÔ∏è Xem chi ti·∫øt</a>
                        <% if (user && user.role === 'manager') { %>
                            <button class="btn btn-warning" onclick="editPromo(<%= promo.id %>)">‚úèÔ∏è S·ª≠a</button>
                            <button class="btn btn-danger" onclick="deletePromo(<%= promo.id %>)">üóëÔ∏è X√≥a</button>
                        <% } %>
                    </div>
                </div>
            <% }); %>
        <% } else { %>
            <div class="no-data">
                <p>üì≠ Ch∆∞a c√≥ CTKM n√†o ƒë∆∞·ª£c t·∫°o</p>
                <p>H√£y b·∫•m "T·∫°o CTKM m·ªõi" ƒë·ªÉ b·∫Øt ƒë·∫ßu</p>
            </div>
        <% } %>
    </div>
</div>

<!-- Modal t·∫°o CTKM -->
<div id="createPromoModal" class="modal">
    <div class="modal-content">
        <span class="close" onclick="closeModal()">&times;</span>
        <h2>üéØ T·∫°o CTKM m·ªõi</h2>
        
        <form id="promoForm" class="promo-form">
            <div class="form-section">
                <h3>üìã Th√¥ng tin c∆° b·∫£n</h3>
                <div class="form-group">
                    <label>T√™n CTKM *</label>
                    <input type="text" name="name" required placeholder="Nh·∫≠p t√™n ch∆∞∆°ng tr√¨nh khuy·∫øn m√£i">
                </div>
                <div class="form-group">
                    <label>M√¥ t·∫£</label>
                    <textarea name="description" placeholder="M√¥ t·∫£ ng·∫Øn v·ªÅ CTKM"></textarea>
                </div>
                <div class="form-row">
                    <div class="form-group">
                        <label>üìÖ Ng√†y b·∫Øt ƒë·∫ßu *</label>
                        <input type="date" name="start_date" required>
                    </div>
                    <div class="form-group">
                        <label>üìÖ Ng√†y k·∫øt th√∫c *</label>
                        <input type="date" name="end_date" required>
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group">
                        <label>üîÑ Channel √°p d·ª•ng</label>
                        <select name="channel">
                            <option value="All">T·∫•t c·∫£</option>
                            <option value="Online">Online</option>
                            <option value="Offline">Offline</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label>üéÅ Lo·∫°i CTKM *</label>
                        <select name="promo_type" required onchange="togglePromoFields()">
                            <option value="">Ch·ªçn lo·∫°i CTKM</option>
                            <option value="Kh√¥ng c√≥ m√£">Kh√¥ng c√≥ m√£</option>
                            <option value="Coupon">Coupon</option>
                            <option value="Voucher">Voucher</option>
                            <option value="∆Øu ƒë√£i thanh to√°n">∆Øu ƒë√£i thanh to√°n</option>
                            <option value="Gift">Qu√† t·∫∑ng (Gift)</option>
                        </select>
                    </div>
                </div>
                <div class="form-group" id="couponField" style="display: none;">
                    <label>üîë M√£ coupon</label>
                    <input type="text" name="coupon_code" placeholder="Nh·∫≠p m√£ coupon">
                </div>
            </div>

            <div class="form-section">
                <h3>üéØ Ph·∫°m vi √°p d·ª•ng</h3>
                <div class="form-group">
                    <label>√Åp d·ª•ng cho</label>
                    <select name="apply_to" onchange="toggleApplyTo()">
                        <option value="all">T·∫•t c·∫£ s·∫£n ph·∫©m</option>
                        <option value="category">Theo danh m·ª•c</option>
                        <option value="brand">Theo brand</option>
                        <option value="sku">Theo SKU</option>
                    </select>
                </div>

                <div class="form-group" id="categoryField" style="display: none;">
                    <label>Danh m·ª•c</label>
                    <select name="categories" multiple>
                        <% categories.forEach(cat => { %>
                            <option value="<%= cat %>"><%= cat %></option>
                        <% }); %>
                    </select>
                </div>

                <div class="form-group" id="brandField" style="display: none;">
                    <label>Brand</label>
                    <select name="brands" multiple>
                        <% brands.forEach(brand => { %>
                            <option value="<%= brand %>"><%= brand %></option>
                        <% }); %>
                    </select>
                </div>

                <div class="form-group" id="skuField" style="display: none;">
                    <label>SKU (ph√¢n c√°ch b·∫±ng d·∫•u ph·∫©y)</label>
                    <textarea name="skus" placeholder="VD: SKU001, SKU002, SKU003"></textarea>
                </div>
            </div>

            <div class="form-section">
                <h3>‚ö° T√≠nh nƒÉng ƒë·∫∑c bi·ªát</h3>
                <div class="checkbox-group">
                    <label>
                        <input type="checkbox" name="is_special" onchange="toggleSpecialRules()"> CTKM ƒë·∫∑c bi·ªát
                    </label>
                </div>

                <div id="specialRules" style="display: none;">
                    <div class="form-group">
                        <label>Quy t·∫Øc gi·∫£m gi√° theo brand/subcat</label>
                        <div id="specialRulesContainer">
                            <div class="dynamic-item">
                                <input type="text" placeholder="Brand" name="special_brand[]">
                                <input type="text" placeholder="Subcat" name="special_subcat[]">
                                <input type="number" placeholder="M·ª©c gi·∫£m" name="special_discount[]">
                                <button type="button" class="remove-item" onclick="removeRule(this)">X√≥a</button>
                            </div>
                        </div>
                        <button type="button" class="add-item" onclick="addRule()">+ Th√™m quy t·∫Øc</button>
                    </div>
                </div>

                <div class="checkbox-group">
                    <label>
                        <input type="checkbox" name="compatible_with_other"> C√≥ th·ªÉ d√πng chung v·ªõi CTKM kh√°c
                    </label>
                </div>
            </div>

            <div class="form-actions">
                <button type="submit" class="btn btn-primary">‚úÖ T·∫°o CTKM</button>
                <button type="button" class="btn btn-secondary" onclick="closeModal()">‚ùå H·ªßy</button>
            </div>
        </form>
    </div>
</div>

<script>
    // JavaScript ƒë·ªÉ x·ª≠ l√Ω modal v√† form
    function showCreateModal() {
        document.getElementById('createPromoModal').style.display = 'block';
    }

    function closeModal() {
        document.getElementById('createPromoModal').style.display = 'none';
    }

    function togglePromoFields() {
        const promoType = document.querySelector('select[name="promo_type"]').value;
        document.getElementById('couponField').style.display = promoType === 'Coupon' ? 'block' : 'none';
    }

    function toggleApplyTo() {
        const applyTo = document.querySelector('select[name="apply_to"]').value;
        document.getElementById('categoryField').style.display = applyTo === 'category' ? 'block' : 'none';
        document.getElementById('brandField').style.display = applyTo === 'brand' ? 'block' : 'none';
        document.getElementById('skuField').style.display = applyTo === 'sku' ? 'block' : 'none';
    }

    function toggleSpecialRules() {
        const isSpecial = document.querySelector('input[name="is_special"]').checked;
        document.getElementById('specialRules').style.display = isSpecial ? 'block' : 'none';
    }

    function addRule() {
        const container = document.getElementById('specialRulesContainer');
        const newRule = document.createElement('div');
        newRule.className = 'dynamic-item';
        newRule.innerHTML = `
            <input type="text" placeholder="Brand" name="special_brand[]">
            <input type="text" placeholder="Subcat" name="special_subcat[]">
            <input type="number" placeholder="M·ª©c gi·∫£m" name="special_discount[]">
            <button type="button" class="remove-item" onclick="removeRule(this)">X√≥a</button>
        `;
        container.appendChild(newRule);
    }

    function removeRule(button) {
        button.parentElement.remove();
    }
    
    function editPromo(id) {
    window.location.href = `/edit-promotion/${id}`;
  }
    // T√¨m ki·∫øm CTKM
    document.getElementById('promoSearch').addEventListener('input', function(e) {
        const searchTerm = e.target.value.toLowerCase();
        const promoCards = document.querySelectorAll('.promo-card');
        
        promoCards.forEach(card => {
            const promoName = card.getAttribute('data-name');
            if (promoName.includes(searchTerm)) {
                card.style.display = 'block';
            } else {
                card.style.display = 'none';
            }
        });
    });


// X·ª≠ l√Ω submit form - FIXED VERSION
document.getElementById('promoForm').addEventListener('submit', async function(e) {
    e.preventDefault();
    
    const submitBtn = this.querySelector('button[type="submit"]');
    const originalText = submitBtn.textContent;
    
    submitBtn.disabled = true;
    submitBtn.textContent = 'üîÑ ƒêang t·∫°o...';
    
    try {
        // L·∫•y d·ªØ li·ªáu form ƒë√∫ng c√°ch cho arrays
        const formData = new FormData(this);
        const data = {};
        
        // X·ª≠ l√Ω c√°c field array
        const specialBrands = [];
        const specialSubcats = [];
        const specialDiscounts = [];
        
        for (let [key, value] of formData.entries()) {
            if (key === 'special_brand[]') {
                specialBrands.push(value);
            } else if (key === 'special_subcat[]') {
                specialSubcats.push(value);
            } else if (key === 'special_discount[]') {
                specialDiscounts.push(value);
            } else {
                data[key] = value;
            }
        }
        
        // Th√™m arrays v√†o data
        data['special_brand[]'] = specialBrands;
        data['special_subcat[]'] = specialSubcats;
        data['special_discount[]'] = specialDiscounts;
        
        console.log('Form data to submit:', data);
        
        // G·ª≠i request ƒë·∫øn server
        const response = await fetch('/create-promotion', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(data)
        });
        
        const result = await response.json();
        console.log('Server response:', result);
        
        if (result.success) {
            alert('‚úÖ T·∫°o CTKM th√†nh c√¥ng!');
            closeModal();
            await refreshPromoList();
        } else {
            alert('‚ùå L·ªói: ' + result.error);
        }
    } catch (error) {
        console.error('Submit error:', error);
        alert('‚ùå L·ªói k·∫øt n·ªëi: ' + error.message);
    } finally {
        submitBtn.disabled = false;
        submitBtn.textContent = originalText;
    }
});
    
// ƒê·∫£m b·∫£o modal hi·ªÉn th·ªã ƒë√∫ng
function showCreateModal() {
    console.log('Show modal triggered');
    document.getElementById('createPromoModal').style.display = 'block';
    
    // Reset form khi m·ªü modal
    document.getElementById('promoForm').reset();
}

// Debug: Ki·ªÉm tra xem h√†m c√≥ ƒë∆∞·ª£c g·ªçi kh√¥ng
document.querySelector('.btn.btn-primary').addEventListener('click', function() {
    console.log('Create button clicked');
    showCreateModal();
});

// Th√™m event listener ƒë·ªÉ debug
document.addEventListener('DOMContentLoaded', function() {
    console.log('DOM loaded');
    
    const createBtn = document.querySelector('.btn.btn-primary');
    if (createBtn) {
        createBtn.addEventListener('click', showCreateModal);
        console.log('Create button event listener added');
    }
});
// H√†m refresh danh s√°ch CTKM
async function refreshPromoList() {
    try {
        console.log('Refreshing promotion list...');
        
        const response = await fetch('/api/promotions');
        const result = await response.json();
        
        if (result.success) {
            const promoList = document.querySelector('.promo-list');
            promoList.innerHTML = '';
            
            if (result.promotions && result.promotions.length > 0) {
                result.promotions.forEach(promo => {
                    const promoCard = createPromoCard(promo);
                    promoList.appendChild(promoCard);
                });
                console.log('Promotions loaded:', result.promotions.length);
            } else {
                promoList.innerHTML = `
                    <div class="no-data">
                        <p>üì≠ Ch∆∞a c√≥ CTKM n√†o ƒë∆∞·ª£c t·∫°o</p>
                        <p>H√£y b·∫•m "T·∫°o CTKM m·ªõi" ƒë·ªÉ b·∫Øt ƒë·∫ßu</p>
                    </div>
                `;
            }
        } else {
            console.error('Refresh failed:', result.error);
        }
    } catch (error) {
        console.error('Refresh error:', error);
    }
}
// Ki·ªÉm tra k·∫øt n·ªëi API
async function testConnection() {
    try {
        const response = await fetch('/api/promotions');
        console.log('API connection test:', response.status);
    } catch (error) {
        console.error('API connection failed:', error);
    }
}

// Ch·∫°y ki·ªÉm tra khi trang load
testConnection();

    // X√≥a CTKM (ch·ªâ manager)
    function deletePromo(id) {
        if (confirm('B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a CTKM n√†y?')) {
            fetch(`/api/promotions/${id}`, {
                method: 'DELETE'
            })
            .then(response => response.json())
            .then(result => {
                if (result.success) {
                    alert('‚úÖ X√≥a CTKM th√†nh c√¥ng!');
                    location.reload();
                } else {
                    alert('‚ùå L·ªói: ' + result.error);
                }
            })
            .catch(error => {
                alert('‚ùå L·ªói k·∫øt n·ªëi: ' + error.message);
            });
        }
    }

    // ƒê√≥ng modal khi click b√™n ngo√†i
    window.addEventListener('click', function(event) {
        const modal = document.getElementById('createPromoModal');
        if (event.target === modal) {
            closeModal();
        }
    });
</script>



<%- include('partials/footer') %>